--// Cache
local select = select
local pcall, getgenv, next, Vector2, mathclamp, type, mousemoverel = select(1, pcall, getgenv, next, Vector2.new, math.clamp, type, mousemoverel or (Input and Input.MouseMove))

--// Preventing Multiple Processes
pcall(function()
    getgenv().Aimbot.Functions:Exit()
end)

--// Environment
getgenv().Aimbot = {}
local Environment = getgenv().Aimbot

--// Services
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local Camera = workspace.CurrentCamera
local LocalPlayer = Players.LocalPlayer

--// Variables
local RequiredDistance, Typing, Running, Animation, ServiceConnections = 2000, false, false, nil, {}
local AimbotStrength = 0.5 -- Default strength (range 0-1)
local GuiVisible = true -- Variable to track GUI visibility
local RightMouseHeld = false -- Track if right mouse button is held
local AimbotEnabled = true -- Aimbot toggle from the GUI

--// Script Settings
Environment.Settings = {
    Enabled = true,
    TeamCheck = false,
    AliveCheck = true,
    WallCheck = false, -- Laggy
    Sensitivity = AimbotStrength, -- Animation length (in seconds) before fully locking onto target
    ThirdPerson = false, -- Uses mousemoverel instead of CFrame to support locking in third person (could be choppy)
    ThirdPersonSensitivity = 3, -- Boundary: 0.1 - 5
    TriggerKey = "MouseButton2",
    Toggle = false,
    LockPart = "Head" -- Body part to lock on
}

Environment.FOVSettings = {
    Enabled = false,
    Visible = false,
    Amount = 90,
    Color = Color3.fromRGB(255, 255, 255),
    LockedColor = Color3.fromRGB(255, 70, 70),
    Transparency = 0.5,
    Sides = 60,
    Thickness = 1,
    Filled = false
}

Environment.FOVCircle = Drawing.new("Circle")

--// GUI Creation
local ScreenGui = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local ToggleAimbot = Instance.new("TextButton")
local SensitivityLabel = Instance.new("TextLabel")
local SensitivitySliderFrame = Instance.new("Frame")
local SensitivitySlider = Instance.new("Frame")
local SensitivityValueLabel = Instance.new("TextLabel")

ScreenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
Frame.Parent = ScreenGui
Frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
Frame.Position = UDim2.new(0, 100, 0, 100)
Frame.Size = UDim2.new(0, 200, 0, 300)
Frame.Visible = GuiVisible -- Initialize as visible

-- Toggle Aimbot Button
ToggleAimbot.Parent = Frame
ToggleAimbot.Text = "Aimbot: ON"
ToggleAimbot.Size = UDim2.new(0, 200, 0, 50)
ToggleAimbot.Position = UDim2.new(0, 0, 0, 0)
ToggleAimbot.MouseButton1Click:Connect(function()
    AimbotEnabled = not AimbotEnabled
    ToggleAimbot.Text = "Aimbot: " .. (AimbotEnabled and "ON" or "OFF")
end)

-- Sensitivity Label
SensitivityLabel.Parent = Frame
SensitivityLabel.Text = "Aimbot Strength"
SensitivityLabel.Size = UDim2.new(0, 200, 0, 50)
SensitivityLabel.Position = UDim2.new(0, 0, 0, 60)

-- Sensitivity Slider Frame
SensitivitySliderFrame.Parent = Frame
SensitivitySliderFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
SensitivitySliderFrame.Size = UDim2.new(0, 180, 0, 10)
SensitivitySliderFrame.Position = UDim2.new(0, 10, 0, 120)

-- Sensitivity Slider (Draggable part)
SensitivitySlider.Parent = SensitivitySliderFrame
SensitivitySlider.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
SensitivitySlider.Size = UDim2.new(AimbotStrength, 0, 1, 0)
SensitivitySlider.Position = UDim2.new(0, 0, 0, 0)

-- Sensitivity Value Label
SensitivityValueLabel.Parent = Frame
SensitivityValueLabel.Text = tostring(AimbotStrength * 100)
SensitivityValueLabel.Size = UDim2.new(0, 200, 0, 50)
SensitivityValueLabel.Position = UDim2.new(0, 0, 0, 150)

-- Function to update the Aimbot Strength based on slider position
local function UpdateAimbotStrength(input)
    local newSize = math.clamp((input.Position.X - SensitivitySliderFrame.AbsolutePosition.X) / SensitivitySliderFrame.AbsoluteSize.X, 0, 1)
    AimbotStrength = newSize
    SensitivitySlider.Size = UDim2.new(newSize, 0, 1, 0)
    SensitivityValueLabel.Text = tostring(math.floor(AimbotStrength * 100))
    
    -- Update the aimbot's sensitivity based on the slider
    Environment.Settings.Sensitivity = AimbotStrength
end

-- Make the slider draggable
SensitivitySlider.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 then
        local dragging = true
        local inputChanged

        inputChanged = UserInputService.InputChanged:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseMovement and dragging then
                UpdateAimbotStrength(input)
            end
        end)

        input.InputEnded:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = false
                inputChanged:Disconnect()
            end
        end)
    end
end)

--// Toggle GUI Visibility with Right Shift
UserInputService.InputBegan:Connect(function(input)
    if input.KeyCode == Enum.KeyCode.RightShift then
        GuiVisible = not GuiVisible -- Toggle visibility
        Frame.Visible = GuiVisible
    end
end)

--// Detect if Right Mouse Button is Held
UserInputService.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then -- Right Mouse Button
        RightMouseHeld = true
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton2 then -- Right Mouse Button
        RightMouseHeld = false
    end
end)

--// Main Aimbot Logic
local function GetClosestPlayer()
    if not Environment.Locked and RightMouseHeld and AimbotEnabled then
        RequiredDistance = (Environment.FOVSettings.Enabled and Environment.FOVSettings.Amount or 2000)

        for _, v in next, Players:GetPlayers() do
            if v ~= LocalPlayer then
                if v.Character and v.Character:FindFirstChild(Environment.Settings.LockPart) and v.Character:FindFirstChildOfClass("Humanoid") then
                    if Environment.Settings.TeamCheck and v.Team == LocalPlayer.Team then continue end
                    if Environment.Settings.AliveCheck and v.Character:FindFirstChildOfClass("Humanoid").Health <= 0 then continue end
                    if Environment.Settings.WallCheck and #(Camera:GetPartsObscuringTarget({v.Character[Environment.Settings.LockPart].Position}, v.Character:GetDescendants())) > 0 then continue end

                    local Vector, OnScreen = Camera:WorldToViewportPoint(v.Character[Environment.Settings.LockPart].Position)
                    local Distance = (Vector2(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2(Vector.X, Vector.Y)).Magnitude

                    if Distance < RequiredDistance and OnScreen then
                        RequiredDistance = Distance
                        Environment.Locked = v
                    end
                end
            end
        end
    elseif (Vector2(UserInputService:GetMouseLocation().X, UserInputService:GetMouseLocation().Y) - Vector2(Camera:WorldToViewportPoint(Environment.Locked.Character[Environment.Settings.LockPart].Position).X, Camera:WorldToViewportPoint(Environment.Locked.Character[Environment.Settings.LockPart].Position).Y)).Magnitude > RequiredDistance then
        Environment.Locked = nil
    end
end

--// Main Render Loop
RunService.RenderStepped:Connect(function()
    if Environment.Settings.Enabled and RightMouseHeld and AimbotEnabled then
        GetClosestPlayer()
        if Environment.Locked then
            if Environment.Settings.ThirdPerson then
                local Vector = Camera:WorldToViewportPoint(Environment.Locked.Character[Environment.Settings.LockPart].Position)
                mousemoverel((Vector.X - UserInputService:GetMouseLocation().X) * Environment.Settings.ThirdPersonSensitivity, (Vector.Y - UserInputService:GetMouseLocation().Y) * Environment.Settings.ThirdPersonSensitivity)
            else
                local LockPosition = Environment.Locked.Character[Environment.Settings.LockPart].Position
                local Tween = TweenService:Create(Camera, TweenInfo.new(Environment.Settings.Sensitivity, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = CFrame.new(Camera.CFrame.Position, LockPosition)})
                Tween:Play()
            end
        end
    end
end)
